#!/bin/bash
# https://stackoverflow.com/a/7522866
if ! type "aws" >/dev/null; then
    # no aws; nothing to do
    true
elif [ ! -d ~/.aws ]; then
    # no aws directory .. better to leave well alone
    true
else
    host="${HOST:-}"
    if [ -z "${host}" ]; then
        host="$(hostname)"
    fi

    # we might want to toggle between vanilla and SSO
    # default to using SSO
    USE_AWS_SSO=${USE_AWS_SSO:-1}

    # filename changes slightly
    if [ "${USE_AWS_SSO}" = "1" ]; then
        CONFIG_FILENAME_PREFIX="awscli_sso_config"
        [[ -f ~/.aws/credentials ]] && mv -v ~/.aws/credentials{,.pre-sso}
    else
        [[ -f ~/.aws/credentials.pre-sso ]] && mv -v ~/.aws/credentials{.pre-sso,}
        CONFIG_FILENAME_PREFIX="awscli_config"
    fi

    # only do this if it looks like we're on a zoopla box
    case $host in
        macbook.zoopla|Chisels-Mac*|*.dev.uk|chisel-zpg.local|*.eu-west-1.compute.internal)
            # make it configurable with selfish defaults for the script author
            DEFAULT_AWS_SSO_ROLE_NAME="${SHELLRCD_AWS_SSO_ROLE_NAME:-PlatAdmins}"
            USER_PROFILE_BY_NAME="${SHELLRCD_AWS_USER_PROFILE_NAME:-chisel.malik-wright}"

            # lifted from tmux-continuum
            # this doesn't quite seem to work though; we sometimes get double
            # [profile]d if a couple of shells start at the same time
            acquire_lock() {
                    # Sometimes tmux starts multiple saves in parallel. We want only one
                    # save to be running, otherwise we can get corrupted saved state.
                    #local lockdir_prefix="/tmp/shellrcd-gitaliases-$(current_tmux_server_pid)-lock-"
                    local lockdir_prefix="/tmp/shellrcd-awsconfig-lock-"
                    # The following implements a lock that auto-expires after 100...200s.
                    local lock_generation=$(($(date +%s) / 100))
                    local lockdir1="${lockdir_prefix}${lock_generation}"
                    local lockdir2="${lockdir_prefix}$((lock_generation + 1))"
                    if mkdir "$lockdir1" 2>/dev/null; then
                            trap 'rmdir "$lockdir1"' EXIT
                            if mkdir "$lockdir2"; then
                                    # shellcheck disable=SC2064
                                    trap "rmdir '$lockdir1' '$lockdir2'" EXIT
                                    return 0
                            fi
                    fi
                    return 1  # Someone else has the lock.
            }

            # exit immediately if we can't acquire the lockfile
            if ! acquire_lock; then
                echo "[Another terminal is already updating the aws config. Aborting in this terminal.]";
            else
                urlencode() {
                    local data
                    if [[ $# != 1 ]]; then
                        echo "Usage: $0 string-to-urlencode"
                        return 1
                    fi
                    data="$(curl -s -o /dev/null -w '%{url_effective}' --get --data-urlencode "$1" "")"
                    if [[ $? != 3 ]]; then
                        echo "Unexpected error" 1>&2
                        return 2
                    fi
                    echo "${data##/?}"
                    return 0
                }
                ACCOUNT_PATH=$(urlencode "multiaccount/${CONFIG_FILENAME_PREFIX}_by_accountid.txt")
                ACCOUNTBYID_PATH=$(urlencode "multiaccount/${CONFIG_FILENAME_PREFIX}_by_accountid.txt")

                # make sure the ~/.aws/config is up to date
                curl --header "PRIVATE-TOKEN: $GITLAB_SAAS_API_TOKEN" \
                    --silent \
                    -o ~/.aws/config \
                    "https://gitlab.com/api/v4/projects/29401708/repository/files/${ACCOUNT_PATH}/raw?ref=master"
                # we also now grab "config by id"
                curl --header "PRIVATE-TOKEN: $GITLAB_SAAS_API_TOKEN" \
                    --silent \
                    -o ~/.aws/config-by-id \
                    "https://gitlab.com/api/v4/projects/29401708/repository/files/${ACCOUNTBYID_PATH}/raw?ref=master"

                # make sure we set the [default] sso_role_name
                # because we know the format of the file we grabbed, and it
                # only has this once, we don't need to go heavy on sanity
                # checking for multiple matches
                # mac sed and all other sed differ how they treat -i
                case $(uname -s) in
                    Darwin)
                        i_arg="-i'.bak'"
                        ;;
                    *)
                        i_arg="-i'.bak'"
                        ;;
                esac
                sed "${i_arg}" "s/^sso_role_name = .*/sso_role_name = $DEFAULT_AWS_SSO_ROLE_NAME/" ~/.aws/config

                # if using aws-sso, assume we're using aws-vault, and add the empty profile block we will have wiped out with the downloadgqq
                if [ "${USE_AWS_SSO}" = "1" ] && [ -n "${USER_PROFILE_BY_NAME}" ]; then
                    for f in ~/.aws/config*; do
                        echo -e "\n\n[profile ${USER_PROFILE_BY_NAME}]" >> "${f}"
                    done
                fi
            fi
            ;;
    esac
fi
