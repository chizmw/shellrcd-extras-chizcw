#!/bin/bash

# vim: filetype=sh

set -e # exit if any command fails

# if we haven't already initialised, do so, saves an extra manual step
git rev-parse --is-inside-work-tree >/dev/null 2>&1 || git init

# how many commits?
commit_count=$(git rev-list --all --count)

# default to current branch
# also, combined with `set -e` we get an abort if we're not in a git repo
# directory
#branch=$(git rev-parse --abbrev-ref HEAD)

# we want our files to go into the top-level directory ot the project
topdir=$(git rev-parse --show-toplevel)

# grab a .gitignore; assume we have curl
# (currently only writing for ourselves)
if [ -f "$topdir/.gitignore" ]; then
    echo "WARN: $topdir/.gitignore already exists"
else
    # now redirects somewhere else
    curl -Ls -o "$topdir/.gitignore" https://gitignore.io/api/git,vim,node,ruby,go,terraform
    git add "$topdir/.gitignore"
fi

# drop in a yamllint config
if [ ! -f "$topdir/.prettierrc" ]; then
    cp "$HOME/.shellrc.d/assets/dot-yamllint" "$topdir/.yamllint"
    git add "$topdir/.yamllint"
fi

# drop in a prettier config (quote behaviour in vscode/yaml formatting)
if [ ! -f "$topdir/.prettierrc" ]; then
    cp "$HOME/.shellrc.d/assets/dot-prettierrc" "$topdir/.prettierrc"
    git add "$topdir/.prettierrc"
fi

# drop in a pre-commit config
if [ -f "$topdir/.pre-commit-config.yaml" ]; then
    echo "WARN: $topdir/.pre-commit-config.yaml already exists"
else
    # if we have a "preferred" config, use it, otherwise fall back to whatever
    # the default is
    if [ -f "$HOME/.shellrc.d/assets/dot-pre-commit-config.yaml" ]; then
        echo "INFO: copying preferred .pre-commit-config.yaml"
        cp "$HOME/.shellrc.d/assets/dot-pre-commit-config.yaml" "$topdir/.pre-commit-config.yaml"
    else
        echo "INFO: using pre-commit sample-config output"
        pre-commit sample-config >"$topdir/.pre-commit-config.yaml"
    fi
    git add "$topdir/.pre-commit-config.yaml"
    # make sure we actually use it
    pre-commit install
fi

# https://unix.stackexchange.com/a/152554
if [ "${commit_count}" -lt 1 ]; then
    git_parms=(-m 'Initial Commit (dotfiles)')
else
    git_parms=(-m 'Add dotfiles')
fi

for f in $(git diff --cached --name-only); do
    git_parms+=(-m " - add ${f}")
done

git commit "${git_parms[@]}" && git log --oneline -n 1
